@mixin css3-prefix($property, $value) {
    -webkit-#{$property}: #{$value};
    -khtml-#{$property}: #{$value};
    -moz-#{$property}: #{$value};
    -ms-#{$property}: #{$value};
    -o-#{$property}: #{$value};
    #{$property}: #{$value};
}

@mixin background-size($default: contain) {
    @include css3-prefix('background-size', $default);
}

@mixin border-radius($radius: 5px) {
    @include css3-prefix('border-radius', $radius);
}

@mixin transition($args...) {
    @include css3-prefix('transition', $args);
}

@mixin box-shadow($args...) {
    @include css3-prefix('box-shadow', $args);
}

@mixin transform($args...) {
    @include css3-prefix('transform', $args);
}

@mixin box($orient: horizontal, $pack: center, $align: center) {
    display: -webkit-box;
    display: -moz-box;
    display: box;
    
    @include css3-prefix('box-orient', $orient);
    @include css3-prefix('box-pack', $pack);
    @include css3-prefix('box-align', $align);
    
}

@mixin box-sizing($type: border-box) {
    @include css3-prefix('box-sizing', $type);
}

@mixin animation($str) {
    @include css3-prefix('animation', $str);
}

// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
@mixin flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
    -webkit-box-flex: $values;
    -moz-box-flex: $values;
    -webkit-flex: $values;
    -ms-flex: $values;
    flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
    -webkit-flex-direction: $direction;
    -moz-flex-direction: $direction;
    -ms-flex-direction: $direction;
    flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
    -webkit-flex-wrap: $wrap;
    -moz-flex-wrap: $wrap;
    -ms-flex-wrap: $wrap;
    flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
    -webkit-flex-flow: $flow;
    -moz-flex-flow: $flow;
    -ms-flex-flow: $flow;
    flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
    -webkit-box-ordinal-group: $val;  
    -moz-box-ordinal-group: $val;     
    -ms-flex-order: $val;     
    -webkit-order: $val;  
    order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
    -webkit-flex-grow: $grow;
    -moz-flex-grow: $grow;
    -ms-flex-grow: $grow;
    flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number> 
@mixin flex-shrink($shrink) {
    -webkit-flex-shrink: $shrink;
    -moz-flex-shrink: $shrink;
    -ms-flex-shrink: $shrink;
    flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width> 
@mixin flex-basis($width) {
    -webkit-flex-basis: $width;
    -moz-flex-basis: $width;
    -ms-flex-basis: $width;
    flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around 
@mixin justify-content($justify) {
    -webkit-justify-content: $justify;
    -moz-justify-content: $justify;
    -ms-justify-content: $justify;
    justify-content: $justify;
    -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch 
@mixin align-content($align) {
    -webkit-align-content: $align;
    -moz-align-content: $align;
    -ms-align-content: $align;
    align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch 
@mixin align-items($align) {
    -webkit-align-items: $align;
    -moz-align-items: $align;
    -ms-align-items: $align;
    align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
@mixin align-self($align) {
    -webkit-align-self: $align;
    -moz-align-self: $align;
    -ms-align-self: $align;
    align-self: $align;
}


//  Author: Rafal Bromirski
//  www: http://rafalbromirski.com/
//  github: http://github.com/paranoida/sass-mediaqueries
//
//  Licensed under a MIT License
//
//  Version:
//  1.6.1

// --- generator ---------------------------------------------------------------

@mixin mq($args...) {
    $media-type: 'only screen';
    $media-type-key: 'media-type';
    $args: keywords($args);
    $expr: '';
    
    @if map-has-key($args, $media-type-key) {
        $media-type: map-get($args, $media-type-key);
        $args: map-remove($args, $media-type-key);
    }
    
    @each $key, $value in $args {
        @if $value {
            $expr: "#{$expr} and (#{$key}: #{$value})";
        }
    }
    
    @media #{$media-type} #{$expr} {
        @content;
    }
}

// --- screen ------------------------------------------------------------------

@mixin screen($min, $max, $orientation: false) {
    @include mq($min-width: $min, $max-width: $max, $orientation: $orientation) {
        @content;
    }
}

@mixin max-screen($max) {
    @include mq($max-width: $max) {
        @content;
    }
}

@mixin min-screen($min) {
    @include mq($min-width: $min) {
        @content;
    }
}

@mixin screen-height($min, $max, $orientation: false) {
    @include mq($min-height: $min, $max-height: $max, $orientation: $orientation) {
        @content;
    }
}

@mixin max-screen-height($max) {
    @include mq($max-height: $max) {
        @content;
    }
}

@mixin min-screen-height($min) {
    @include mq($min-height: $min) {
        @content;
    }
}

// MINES:
@mixin absolute-center($position) {
    position: absolute;
    margin: auto;
    
    @if $position == 'vertical' {
        top: 0;
        bottom: 0;
    }
    @else if $position == 'horizontal' {
        left: 0;
        right: 0;
    }
    @else if $position == 'both' {
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
    }
}

@mixin margin-lr($val) {
    margin-left: $val;
    margin-right: $val;
}

@mixin margin-center() {
    @include margin-lr(auto);
}

@mixin padding-lr($val) {
    padding-left: $val;
    padding-right: $val;
}

@mixin flex-bar() {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
}

@mixin flex-col() {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    flex-direction: column;
}

@mixin hover($bg-color) {
    @include transition(background .2s);
    &:visited {
        background-color: desaturate($bg-color, 20%);
    }
    &:hover {
        border-color: darken($bg-color, 20%);
        background-color: darken($bg-color, 10%);
    }
    &:active {
        background-color: darken($bg-color, 20%);
    }
}


@mixin gerate-grid($media-name, $media-size) {
    @for $i from 1 through $grid-columns {
        &.#{$media-name}-#{$i} { 
            @include mq($min-width: $media-size) {
                width: percentage( $i / $grid-columns );
            }
        }
    }
}